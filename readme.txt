1.Commits on Nov 2, 2016
Threads_Traffic
16.11.01-16.11.02两天完成本次修改，进行提交。
十字路口模拟最初是以模拟多线程的方式实现的，实际上各个步骤是依次严格按顺序执行，而非真正以多线程的方式进行实现。
本次修改针对这一点，将原先的模拟多线程以实际多线程的方式进行代码重构。这样在不改变项目功能的基础下，以多线程地模式对项目重新进行了实现。
该方式有助于未来对模拟系统功能的扩展和维护。不同于最初将每个功能的执行步骤严格写死，难以修改；本次重构后，每一个功能可以相对独立地执行，以信号量的方式进行互斥竞争或协调同步。

2.Commits on Nov 6, 2016
StorageManagement_File 
本次提交主要对模拟文件系统模拟器进行重构。
最初空闲列表以ArrayList表形式保存，一个空间是否空闲需要遍历该表才能确定，修改后同时用位图法保存空闲空间表，方便查询某模拟磁盘区域是否空闲。
空闲区总大小不再单独统计，由于ArrayList的设计已经足够完善，故直接由适配器方式利用ArrayList的方法来实现。

3.Commits on Nov 9, 2016
TemplateMethod_Overall 
本次提交对项目的整体设计进行重构。
在原始版本中，四个模拟器所执行的操作在接口和逻辑上各自独立，因此在主界面中对每一种模拟器的调用都必须单独写死。而在此次重构中，令四个模拟器各自实现相同的接口FunctionItem和模板方法，在主界面统一以一致的接口形式进行调用，即方便了对不同模拟器的一致调用，也有利于该项目的功能扩展。

4.Commits on Nov 11, 2016
Composite&TemplateMethod_File 
本次修改主要针对文件管理系统，应用了组合模式，模板方法模式，同时也从函数定义链等方面优化了代码。
本次修改新增了两个类FileFCB和FolderFCB，都继承自FCB，实现同名但不同功能的数个方法。
文件系统是典型的组合模式，其中文件作为单个对象，文件夹作为复合对象，利用复合模式可以很简单地实现这种文件系统结构。而模板方法的应用也使得两种对象各司其职，减少了FCB类中写死代码的情况，方便对代码的修改和拓展。

5.Commits on Nov 16, 2016
Adapter_MemAlloc 
本次修改主要针对动态内存分配，应用了适配器模式对代码进行了优化。
在原先的设计中，空闲内存和内存使用表都是自行设计编写完成的，但实际上，维护这两个表的大部分功能都可用标准库中的ArrayList容器实现。因此，在此次重构过程中，我以适配器模式重新封装了ArrayList容器，用于维护这两张内存表。这样可以很好的利用标准库中已经十分完善的代码实现自己的功能，结构清晰，不易出错也便于维护。

6.Commits on Nov 20, 2016
PackageRefactor_All 
本次操作主要重新划分包结构，将原本在一个包内的源文件按照功能点分解到了多个包内，增强代码的可读性，使代码结构更加清晰。

7.Commits on Nov 22, 2016
FactoryMethod&TemplateMethod_Paging
本次重构主要对页式内存管理器进行修改，用工厂方法和模板方法等方面优化了代码。
在原先的设计中，页式内存管理中指令是Instruction类，通过成员变量确定其类型。这种方法把指令类型写死在代码里，不易拓展；同时在各处设计逻辑时都要考虑到各种可能指令，而不能将同一种指令的不同操作集中到一起实现。
重构之后，原有的三种指令都是继承自Instruction类的子类，各自实现有关PC变化，输出等再内的指令逻辑，在主函数中，以工厂方法的形式进行创建，以模板方法的形式进行调用。这种做法大大增强了代码的可拓展性，便于理解和维护代码，减少设计修改代码中可能出现的错误。

8.Commits on Nov 25, 2016
Prototype&FactoryMethod_Paging 
本次重构仍然是对页式内存管理进行修改，使用原型模式和工厂方法重构代码。
其中原型模式主要用于Instruction子类的创建，对每一种子类建立一个原型对象并保存起来，每次需要相应子类时，只需要调用该子类原型的create函数便可创建一个新的对象并对其初始化。这种方式可以减少其他类对Instruction子类实现细节的关注，只需要简单地调用create函数即可创建对象。
而create函数的设计是模板方法的应用，在每一个子类中实现create函数，而在调用该函数的类中重新封装这一方法，这种设计可以有效地实现解耦合，方便未来拓展更多的Instruction子类。如继续拓展子类，只需要对子类设计好指定的几个方法，并在Paging类的Instruction原型列表中添加一个新子类原型即可，避免了对Paging类的大幅改动。

9.Commits on Nov 28, 2016
PackageRefactor2_All
这次重构主要是重新划分了包结构和类结构，将一个java文件分解为多个java文件。是的代码结构更加清晰，可读性更强。同时还更正了一处拼写错误。

10.Commits on Nov 30, 2016
LambdaExpression_All
本次重构主要应用了lambda表达式对代码进行优化，对整个项目各个模块进行修改，将不需要复用的诸如Thread等对象的构造用lambda表达式实现。
利用该方式，可以把重点放在这些代码中函数的设计而非类和对象的设计上；同时使代码更加简洁，大大增强代码的可读性，方便之后进一步重构。

11.Commits on Dec 4, 2016
Composite2_File
本次重构主要对模拟文件系统级进行修改，应用组合模式重构这一部分代码，在前面的重构过程中已经应用了组合模式，但存在bug。之前提交的版本中只是简单地使用了组合模式的结构，但在增删过程中，对复合对象保存的对象列表的修改有一些问题(遗漏或重复)，在这次重构过程中修复了这些问题。
